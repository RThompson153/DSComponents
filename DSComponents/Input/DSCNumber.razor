@using System.Timers
@using DSComponents.Input.Enums
@using DSComponents.Input.Models
@using System.Text.RegularExpressions
@inject IDSCService DSCService

<div class="dscnumber" @onclick:stopPropagation>
	<CascadingValue Value="@Config">
		<div class="dscnumber-number @Config.TextColor @_bg @((Config.Error) ? "error" : "")">
			@if(!HideLabel)
			{
				<DSCLabel Config="@Config.Label" TextColor="@Config.TextColor" BGColor="@_bg" />
			}

			<input type="number" class="dscnumber-content" placeholder="@Config.Placeholder" name="@Config.Name" value="@_value" min="@Config.Minimum" maxlength="@Config.Maximum" @onchange="onInput" @onfocusin="onFocusIn" disabled="@Config.Disabled" />
			
		</div>
		@*@if(!string.IsNullOrEmpty(_error))
		{
			<span class="error">! @_error</span>
		}*@
	</CascadingValue>
</div>

@code{
	[Parameter]
	public DSCConfig Config { get; set; }
	[Parameter]
	public bool HideLabel { get; set; }
	[Parameter]
	public bool HideButtons { get; set; }
	[Parameter]
	public EventCallback<object> OnInput { get; set; }

	private Timer _timer;
	private object _value;
	private string _bg, _error;

	protected override void OnInitialized()
	{
		if(Config.Timeout is not null && !OnInput.HasDelegate)
			throw new Exception("A timeout call back is required when providing a timeout value.");

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		var configs = DSCService.DSCInputConfigs.ToList();

		if (!configs.Contains(Config))
			configs.Add(Config);

		DSCService.DSCInputConfigs = configs;

		if(Config.Timeout is not null)
		{
			_timer = new Timer();
			_timer.Interval = Config.Timeout.GetValueOrDefault();
			_timer.Elapsed += (x, y) => timeout();
			_timer.AutoReset = false;
		}

		_bg = (Config.Disabled)
			? "disabled"
			: Config.BackgroundColor;

		Config.Minimum = Config.Minimum ?? 0;
		Config.Maximum = Config.Maximum ?? 524288;

		base.OnParametersSet();
	}

	private void onInput(ChangeEventArgs val)
	{
		_timer?.Stop();

		_value = Config.Type switch
		{
			NumericType.Int => int.TryParse(val.Value?.ToString(), out int _value),
			NumericType.Decimal => decimal.TryParse(val.Value?.ToString(), out decimal _value),
			NumericType.Double => double.TryParse(val.Value?.ToString(), out double _value),
			NumericType.Long => long.TryParse(val.Value?.ToString(), out long _value),
			_ => throw new Exception("Input is not a numeric type.")
		};

		setError();

		if(_timer is null)
			OnInput.InvokeAsync(_value);
		else
			_timer.Start();
	}

	private void onFocusIn() => setError();

	private void setError(){ }

	//private void setError() => Config.Error = ((Config.Minimum is not null && _value < Config.Minimum) 
	//	|| (Config.Maximum is not null && _value > Config.Maximum));

	private void timeout() => OnInput.InvokeAsync(_value);
}