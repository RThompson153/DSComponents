@using System.Linq
@using DSComponents
@using DSComponents.Input.Enums
@using DSComponents.Input.Models

@switch(_config.Label.Position)
{
	case LabelPosition.Top:
	case LabelPosition.TopLeft:
	case LabelPosition.TopRight:
	case LabelPosition.InlineTop:
	case LabelPosition.InlineTopLeft:
	case LabelPosition.InlineTopRight:
		<DSCLabel Options="@_config" />
		break;
}

<div class="col-12">
	<div class="d-flex rounded dropdown @_config.TextColor @_config.BackgroundColor @_config.TextColor @((_config.Error) ? "error" : "")" data-for="@($"dropdown-list-{_ref}")" @onclick="toggleDropdown" @onclick:stopPropagation @onclick:preventDefault>
		<div class="col-10">
			@if(_value?.Any() == true)
			{
				@foreach(KeyValuePair<object, string> item in _value)
				{
					<span>@item.Value</span>
				}
			}
		</div>
		<i class="my-auto ml-auto caret @((_expanded) ? "caret-up": "caret-down")"></i>
	</div>

	@if(_expanded)
	{
		<div class="dropdown-list" id="@($"dropdown-list-{_ref}")">
			@if(_config.Searchable)
			{
				<DSCText Options="@_config" Callback="search" />
			}

			<ul class="p-0">
				@foreach(KeyValuePair<object, object> item in _filteredItems)
				{
					<li class="px-1 @((_value?.ContainsKey(item.Key) == true) ? "selected" : "")" @onclick="@(() => onChange(item))">@item.Value</li>
				}
			</ul>
		</div>
	}
</div>

@switch(_config.Label.Position)
{
	case LabelPosition.Bottom:
	case LabelPosition.BottomLeft:
	case LabelPosition.BottomRight:
	case LabelPosition.InlineBottom:
	case LabelPosition.InlineBottomLeft:
	case LabelPosition.InlineBottomRight:
		<DSCLabel Options="@_config" />
		break;
}

@code {
	[CascadingParameter]
	protected IDSCService DSCService { get; set; }
	[Parameter]
	public DSCInputConfig Options { get; set; }
	[Parameter]
	public EventCallback<(bool, DSCInputConfig)> ExpandCallback { get; set; }

	private DSCInputConfig _config;
	private bool _expanded, _shouldRender;
	private Dictionary<object, object> _filteredItems;
	private Dictionary<object, string> _value;
	private Guid _ref;

	protected override void OnInitialized()
	{
		_ref = Guid.NewGuid();

		_value = new Dictionary<object, string>();

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		_config = Options;

		_config.Id = _ref;

		_expanded = _config.Expanded;

		_filteredItems = _config.Items;	

		base.OnParametersSet();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		var configs = DSCService.DSCInputConfigs.ToList();

		if (!configs.Contains(_config))
			configs.Add(_config);

		DSCService.DSCInputConfigs = configs;

		base.OnAfterRender(firstRender);
	}

	protected override bool ShouldRender() => _shouldRender;

	private void search(string val) => _filteredItems = _config.Items.Where(i => i.Value.ToString().ToLower().Contains(val.ToLower())).ToDictionary(x => x.Key, y => y.Value);

	private void onChange(KeyValuePair<object, object> item)
	{
		if (!_value.ContainsKey(item.Key))
			_value.Add(item.Key, item.Value.ToString());
		else
			_value.Remove(item.Key);
	}

	private void toggleDropdown()
	{
		_expanded = !_expanded;

		ExpandCallback.InvokeAsync((_expanded, _config));

		_shouldRender = true;
	}
}
