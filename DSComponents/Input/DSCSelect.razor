@using System.Linq
@using DSComponents
@using DSComponents.Input.Enums
@using DSComponents.Input.Models
@inject IDSCService DSCService

<div class="dscselect" @onclick:stopPropagation>
	@*<div class="label">
		<div class="label-inline top" style="height: 0.1rem; display: flex; justify-content: center;">
			<span style="position: absolute; transform: translateY(-0.7rem); background-color: white;">Label</span>
		</div>
	</div>*@
	<CascadingValue Value="@Config">
		<div class="dscselect-select" @onclick="toggleSelectMenu">
			<div class="label">
				<div class="label-inline top" style="height: 0.1rem; display: flex; justify-content: center;">
					<span style="position: absolute; transform: translateY(-0.75rem); background-color: white;">Label</span>
				</div>
			</div>
			<span>@(string.Join(",", Config.Value))</span>
		</div>

		@if(_expanded)
		{
			<div class="dscselect-select-menu" @onclick="selectItem">
				<ul class="bg-white">
					@if(Config.Searchable)
					{
						<div class="dscselect-search">
							<input type="text" class="col-12" placeholder="Search..." @oninput="filterItems" @onclick:stopPropagation />
						</div>
					}

					@ChildContent	
				</ul>
			</div>
		}
	</CascadingValue>
</div>

@code {
	[Parameter]
	public DSCInputConfig Config { get; set; }

	[Parameter]
	public bool Expanded 
	{
		get => _expanded; 
		set
		{
			if (_expanded == value) return;

			_expanded = value;

			ExpandedChanged.InvokeAsync(value);
		}
	}
	[Parameter]
	public EventCallback<bool> ExpandedChanged { get; set; }
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	private bool _expanded;
	private List<object> _filteredList;

	protected override void OnInitialized()
	{
		_filteredList = Config.SelectItems;

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		var configs = DSCService.DSCInputConfigs.ToList();

		if (!configs.Contains(Config))
			configs.Add(Config);

		DSCService.DSCInputConfigs = configs;

		base.OnParametersSet();
	}

	private void filterItems(ChangeEventArgs val)
	{
		var search = val.Value.ToString();

		Config.SelectItems = _filteredList.Where(i => i.ToString().ToLower().Contains(search)).ToList();
	}

	private void selectItem()
	{
		if (!Config.Multiple || !Config.Value.Any() || Config.Value.Count() == Config.SelectItems.Count())
			Expanded = false;			
	}

	private void toggleSelectMenu()
	{
		foreach (var config in DSCService.DSCInputConfigs.ToList())
			config.Expanded = false;

		Expanded = !Expanded;			
	}
}