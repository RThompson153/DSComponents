@using System.Linq
@using DSComponents
@using DSComponents.Enums
@inject IDSCService DSCService


<CascadingValue Value="@Config">
	<div class="dscselect" @onclick:stopPropagation>
		@switch(Config.Label?.Position)
		{
			case Position.Top:
			case Position.Left:
				@if(!HideLabel)
				{
					<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
				}

				<div class="dscselect-select dsc-text @_bg @((Config.Error) ? "error" : "")" @onclick="toggleSelectMenu">
					<div class="dscselect-content-wrapper">
						<div class="dscselect-content">
							<span class="dsc-content-items">@(string.Join(",", Config.SelectValues))</span>
				
						</div>

						<i class="chevron chevron-@((_expanded) ? "up" : "down")"></i>
					</div>
				</div>
				break;
			case Position.Right:
				<div class="dscselect-select dsc-text @_bg @((Config.Error) ? "error" : "")" @onclick="toggleSelectMenu">
					<div class="dscselect-content-wrapper">
						<div class="dscselect-content">
							<span class="dsc-content-items">@(string.Join(",", Config.SelectValues))</span>
				
						</div>

						<i class="chevron chevron-@((_expanded) ? "up" : "down")"></i>
					</div>
				</div>

				@if(!HideLabel)
				{
					<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
				}
				break;
			case Position.InlineTop:
			case Position.InlineTopLeft:
			case Position.InlineTopRight:
				<div class="dscselect-select dsc-text @_bg @((Config.Error) ? "error" : "")" @onclick="toggleSelectMenu">
					@if(!HideLabel)
					{
						<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
					}

					<div class="dscselect-content-wrapper">
						<div class="dscselect-content">
							<span class="dsc-content-items">@(string.Join(",", Config.SelectValues))</span>
				
						</div>

						<i class="chevron chevron-@((_expanded) ? "up" : "down")"></i>
					</div>
				</div>
				break;
			default:
				<div class="dscselect-select dsc-text @_bg @((Config.Error) ? "error" : "")" @onclick="toggleSelectMenu">
					<div class="dscselect-content-wrapper">
						<div class="dscselect-content">
							<span class="dsc-content-items">@(string.Join(",", Config.SelectValues))</span>
				
						</div>

						<i class="chevron chevron-@((_expanded) ? "up" : "down")"></i>
					</div>
				</div>
				break;
		}
	</div>

	@if(_expanded)
	{
		<div class="dscselect-select-menu" @onclick="selectItem">
			<ul class="dsc-text @_bg @((HideLabel) ? "menu-full-width" : "")">
				@if(Config.Searchable)
				{
					<div class="dscselect-search" @onclick:stopPropagation>
						<DSCText Config="@Config" HideLabel="true" OnInput="filterItems" />
					</div>
				}

				@if(Config.SelectItems.Any())
				{
					@ChildContent
				}
				else
				{
					<h6 class="empty-list">No Items</h6>
				}
			</ul>
		</div>
	}
</CascadingValue>

@code {
	[Parameter]
	public DSCConfig Config { get; set; }
	[Parameter]
	public bool HideLabel { get; set; }
	[Parameter]
	public bool Expanded 
	{
		get => _expanded; 
		set
		{
			if (_expanded == value) return;

			_expanded = value;

			ExpandedChanged.InvokeAsync(value);
		}
	}
	[Parameter]
	public EventCallback<bool> ExpandedChanged { get; set; }
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	private bool _expanded;
	private List<object> _filteredList;
	private string _bg;

	protected override void OnInitialized()
	{
		_filteredList = Config.SelectItems;

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		var configs = DSCService.Dropdowns.ToList();

		if (!configs.Contains(Config))
			configs.Add(Config);

		DSCService.Dropdowns = configs;

		_bg = (Config.Disabled)
			? "disabled"
			: "dsc-background";

		Config.Minimum = Config.Minimum ?? 0;
		Config.Maximum = Config.Maximum ?? Config.SelectItems.Count();

		if (Config.Multiple && Config.SelectValues.Count() != Config.Maximum && Config.SelectValues.Any())
			Expanded = true;

		base.OnParametersSet();
	}

	private void filterItems(string val) => Config.SelectItems = _filteredList.Where(i => i.ToString().ToLower().Contains(val)).ToList();

	private void selectItem()
	{
		Config.Error = (Config.SelectValues.Count() < Config.Minimum) || (Config.SelectValues.Count() > Config.Maximum);

		if (!Config.Multiple || !Config.SelectValues.Any() || Config.SelectValues.Count() == Config.Maximum)
			Expanded = false;			
	}

	private void toggleSelectMenu()
	{
		if (Config.Disabled)
			return;

		Config.SelectItems = _filteredList;

		foreach (var config in DSCService.Dropdowns.ToList())
			config.Expanded = false;

		Expanded = !Expanded;			
	}
}