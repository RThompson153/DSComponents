@using System.Linq
@using DSComponents
@using DSComponents.Input.Enums
@using DSComponents.Input.Models
@inject IDSCService DSCService

<div class="dscselect" @onclick:stopPropagation>
	<CascadingValue Value="@Config">
		<div class="dscselect-select @Config.TextColor @_bg @((Config.Error) ? "error" : "")" @onclick="toggleSelectMenu">
			<DSCLabel Config="@Config.Label" TextColor="@Config.TextColor" BGColor="@_bg" />

			<div class="dscselect-content">
				<span class="">@(string.Join(",", Config.SelectValues))</span>
				<i class="chevron chevron-@((_expanded) ? "up" : "down")"></i>
			</div>
			
		</div>

		@if(_expanded)
		{
			<div class="dscselect-select-menu" @onclick="selectItem">
				<ul class="@Config.TextColor @_bg">
					@if(Config.Searchable)
					{
						<div class="dscselect-search" @onclick:stopPropagation>
							<DSCText Config="@Config" HideLabel="true" OnInput="filterItems" />
						</div>
					}

					@if(Config.SelectItems.Any())
					{
						@ChildContent
					}
					else
					{
						<h6 class="empty-list">No Items</h6>
					}
				</ul>
			</div>
		}
	</CascadingValue>
</div>

@code {
	[Parameter]
	public DSCConfig Config { get; set; }

	[Parameter]
	public bool Expanded 
	{
		get => _expanded; 
		set
		{
			if (_expanded == value) return;

			_expanded = value;

			ExpandedChanged.InvokeAsync(value);
		}
	}
	[Parameter]
	public EventCallback<bool> ExpandedChanged { get; set; }
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	private bool _expanded;
	private List<object> _filteredList;
	private string _bg;

	protected override void OnInitialized()
	{
		_filteredList = Config.SelectItems;

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		var configs = DSCService.DSCInputConfigs.ToList();

		if (!configs.Contains(Config))
			configs.Add(Config);

		DSCService.DSCInputConfigs = configs;

		_bg = (Config.Disabled)
			? "disabled"
			: Config.BackgroundColor;

		Config.Minimum = Config.Minimum ?? 0;
		Config.Maximum = Config.Maximum ?? Config.SelectItems.Count();

		base.OnParametersSet();
	}

	private void filterItems(string val) => Config.SelectItems = _filteredList.Where(i => i.ToString().ToLower().Contains(val)).ToList();

	private void selectItem()
	{
		Config.Error = (Config.SelectValues.Count() < Config.Minimum) || (Config.SelectValues.Count() > Config.Maximum);

		if (!Config.Multiple || !Config.SelectValues.Any() || Config.SelectValues.Count() == Config.Maximum)
			Expanded = false;			
	}

	private void toggleSelectMenu()
	{
		if (Config.Disabled)
			return;

		Config.SelectItems = _filteredList;

		foreach (var config in DSCService.DSCInputConfigs.ToList())
			config.Expanded = false;

		Expanded = !Expanded;			
	}
}