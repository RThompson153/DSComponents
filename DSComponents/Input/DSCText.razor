@using System.Timers
@using DSComponents.Enums
@using DSComponents.Input.Models
@using System.Text.RegularExpressions
@inject IDSCService DSCService

<div class="dsctext" @onclick:stopPropagation>
	<CascadingValue Value="@Config">
		@switch(Config.Label.Position)
		{
			case Position.Top:
			case Position.Left:
				@if(!HideLabel)
				{
					<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
				}

				<div class="dsctext-text dsc-text @_bg @((Config.Error) ? "error" : "")">
					<input type="text" class="dsctext-content" placeholder="@Config.Placeholder" name="@Config.Name" value="@_value" min="@Config.Minimum" maxlength="@Config.Maximum" @oninput="onInput" @onkeyup="onKeyup" disabled="@Config.Disabled" />
				</div>
				break;
			case Position.Right:
				<div class="dsctext-text dsc-text @_bg @((Config.Error) ? "error" : "")">
					<input type="text" class="dsctext-content" placeholder="@Config.Placeholder" name="@Config.Name" value="@_value" min="@Config.Minimum" maxlength="@Config.Maximum" @oninput="onInput" @onkeyup="onKeyup" disabled="@Config.Disabled" />
				</div>

				@if(!HideLabel)
				{
					<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
				}
				break;
			case Position.InlineTop:
			case Position.InlineTopLeft:
			case Position.InlineTopRight:
				<div class="dsctext-text dsc-text @_bg @((Config.Error) ? "error" : "")">
					@if(!HideLabel)
					{
						<DSCLabel Config="@Config.Label" Disabled="@Config.Disabled" />
					}

					<input type="text" class="dsctext-content" placeholder="@Config.Placeholder" name="@Config.Name" value="@_value" min="@Config.Minimum" maxlength="@Config.Maximum" @oninput="onInput" @onkeyup="onKeyup" disabled="@Config.Disabled" />
				</div>
				break;
		}
		@*@if(!string.IsNullOrEmpty(_error))
		{
			<span class="error">! @_error</span>
		}*@
	</CascadingValue>
</div>

@code{
	[Parameter]
	public DSCConfig Config { get; set; }
	[Parameter]
	public bool HideLabel { get; set; }
	[Parameter]
	public IgnorePattern Ignore { get; set; }
	[Parameter]
	public string Pattern { get; set; }
	[Parameter]
	public EventCallback<string> OnInput { get; set; }

	private Timer _timer;
	private string _bg, _value, _pattern, _error;

	protected override void OnInitialized()
	{
		if(Config.Timeout is not null && !OnInput.HasDelegate)
			throw new Exception("A timeout call back is required when providing a timeout value.");

		if (Ignore == IgnorePattern.Custom && Pattern is null)
			throw new Exception("A pattern must be provided to ignore a custom character set.");

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		_pattern = Ignore switch
		{
			IgnorePattern.Alpha => "[a-zA-Z]+",
			IgnorePattern.Numeric => "[0-9]+",
			IgnorePattern.AlphaNumeric => "[a-zA-Z0-9]+",
			IgnorePattern.Special => "[^a-zA-Z0-9]+",
			IgnorePattern.Custom => Pattern,
			_ => ""
		};

		if(Config.Timeout is not null)
		{
			_timer = new Timer();
			_timer.Interval = Config.Timeout.GetValueOrDefault();
			_timer.Elapsed += (x, y) => timeout();
			_timer.AutoReset = false;
		}

		_bg = (Config.Disabled)
			? "disabled"
			: "dsc-background";

		Config.Minimum = Config.Minimum ?? 0;
		Config.Maximum = Config.Maximum ?? 524288;

		base.OnParametersSet();
	}

	private void onInput(ChangeEventArgs val)
	{
		_timer?.Stop();

		_value = val.Value.ToString();

		var match = Regex.IsMatch(_value, _pattern);

		Config.Error = false;

		if(match)
		{
			_error = Ignore switch
			{
				IgnorePattern.Alpha => "Alpha characters are not allowed.",
				IgnorePattern.Numeric => "Numeric characters are not allowed.",
				IgnorePattern.AlphaNumeric => "Alpha and Numeric characters are not allowed.",
				IgnorePattern.Special => "Special characters and symbols are not allowed.",
				IgnorePattern.Custom => "",
				_ => ""
			};

			Config.Error = true;
		}
	}

	private void onKeyup(KeyboardEventArgs e)
	{
		_value = Regex.Replace(_value, _pattern, "");

		if(!Config.Error)
			checkError();

		if(_timer is null)
			OnInput.InvokeAsync(_value);
		else
			_timer.Start();
	}

	private void onFocusIn() => checkError();

	private void checkError() => Config.Error = ((Config.Minimum is not null && _value?.Length < Config.Minimum) 
		|| (Config.Maximum is not null && _value?.Length > Config.Maximum));

	private void timeout() => OnInput.InvokeAsync(_value);
}